2024-12-27 22:30:20,193 - neo4j_graphrag.indexes - INFO - Dropping index named 'financial-transcripts'
2024-12-27 22:30:20,207 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintDoesNotExist} {category: SCHEMA} {title: `DROP INDEX `financial-transcripts` IF EXISTS` has no effect.} {description: `financial-transcripts` does not exist.} {position: None} for query: 'DROP INDEX $name IF EXISTS'
2024-12-27 22:30:20,209 - neo4j_graphrag.indexes - INFO - Dropping index named 'financial-transcript-fulltext-index-name'
2024-12-27 22:30:20,212 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintDoesNotExist} {category: SCHEMA} {title: `DROP INDEX `financial-transcript-fulltext-index-name` IF EXISTS` has no effect.} {description: `financial-transcript-fulltext-index-name` does not exist.} {position: None} for query: 'DROP INDEX $name IF EXISTS'
2024-12-27 22:30:20,213 - __main__ - INFO - Existing indexes dropped (if they existed).
2024-12-27 22:30:47,649 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:30:47,664 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'The guidance on client identification came into effect on June 1, 2021.'}})
2024-12-27 22:30:47,866 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:30:47,874 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:30:51,198 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:30:51,228 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:30:51,381 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of persons and entities as required by the Proceeds of Crime (Money Laundering) and Terrorist Financing Act and associated Regulations.'}})
2024-12-27 22:30:51,564 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:30:51,572 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:00,233 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:00,255 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:00,383 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': "Details on how to verify the identity of persons and entities are available in FINTRAC's guidance."}})
2024-12-27 22:31:00,642 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:00,651 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:06,000 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:06,019 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:06,115 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'This guidance is for financial entities.'}})
2024-12-27 22:31:06,288 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:06,293 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:09,476 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:09,489 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:09,541 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'The guidance includes information on when to verify the identity of persons and entities.'}})
2024-12-27 22:31:09,972 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:09,979 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:10,791 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:10,812 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:10,885 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'The guidance explains the difference between verifying identity and keeping client identification information up to date.'}})
2024-12-27 22:31:11,200 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:11,208 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:15,403 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:15,423 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:15,530 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'The guidance outlines exceptions to client identification requirements.'}})
2024-12-27 22:31:15,692 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:15,701 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:19,631 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:19,650 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:19,740 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'References to dollar amounts in the guidance are in Canadian dollars.'}})
2024-12-27 22:31:19,913 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:19,922 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:22,364 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:22,385 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:22,472 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients for large cash transactions.'}})
2024-12-27 22:31:22,719 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:22,728 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:25,960 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:25,974 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:26,078 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients for large virtual currency transactions.'}})
2024-12-27 22:31:26,192 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:26,195 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:30,555 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:30,579 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:30,681 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients for suspicious transactions.'}})
2024-12-27 22:31:30,916 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:30,923 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:33,933 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:33,952 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:34,027 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': "Financial entities must verify the identity of clients when issuing or redeeming money orders, traveller's cheques, or similar negotiable instruments of $3,000 or more."}})
2024-12-27 22:31:34,146 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:34,149 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:43,968 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:43,989 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:44,102 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients when initiating an international electronic funds transfer of $1,000 or more.'}})
2024-12-27 22:31:44,369 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:44,375 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:49,089 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:49,107 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:49,194 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients when remitting funds to the beneficiary of an international electronic funds transfer of $1,000 or more.'}})
2024-12-27 22:31:49,322 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:49,330 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:54,570 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:54,591 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:54,691 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients when transferring virtual currency in an amount equivalent to $1,000 or more.'}})
2024-12-27 22:31:54,986 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:54,995 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:31:59,412 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:31:59,442 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:31:59,554 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients when remitting virtual currency to a beneficiary in an amount equivalent to $1,000 or more.'}})
2024-12-27 22:31:59,694 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:31:59,700 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:06,389 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:06,414 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:06,516 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients for foreign currency exchange transactions of $3,000 or more.'}})
2024-12-27 22:32:06,762 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:06,770 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:10,649 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:10,671 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:10,760 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of clients for virtual currency exchange transactions in amounts equivalent to $1,000 or more.'}})
2024-12-27 22:32:11,008 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:11,017 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:14,794 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:14,815 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:14,897 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of account holders and persons authorized to give instructions on accounts.'}})
2024-12-27 22:32:15,201 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:15,205 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:19,604 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:19,619 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:19,682 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of credit card account holders.'}})
2024-12-27 22:32:19,913 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:19,919 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:22,333 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:22,359 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:22,431 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of prepaid payment product account holders and authorized users.'}})
2024-12-27 22:32:22,780 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:22,788 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:28,605 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:28,620 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:28,696 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of persons making payments of $1,000 or more to prepaid payment product accounts.'}})
2024-12-27 22:32:28,922 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:28,929 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:34,452 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:34,471 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:34,564 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Trust companies must verify the identity of settlors or co-trustees of a trust.'}})
2024-12-27 22:32:35,067 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:35,076 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:45,371 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:45,391 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:45,454 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person or entity from which they receive $10,000 or more in cash when the transaction takes place.'}})
2024-12-27 22:32:45,673 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:45,681 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:52,296 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:52,311 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:52,404 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person or entity from which they receive virtual currency in an amount equivalent to $10,000 or more when the transaction takes place.'}})
2024-12-27 22:32:52,565 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:52,573 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:32:59,522 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:32:59,539 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:32:59,638 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must take reasonable measures to verify the identity of every person or entity that conducts or attempts to conduct a suspicious transaction.'}})
2024-12-27 22:32:59,914 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:32:59,920 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:09,898 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:09,925 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:10,043 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': "Financial entities must verify the identity of every person who requests the issuance or redemption of money orders, traveller's cheques, or similar negotiable instruments of $3,000 or more."}})
2024-12-27 22:33:10,314 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:10,322 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:18,896 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:18,916 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:19,012 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person who requests the initiation of an international electronic funds transfer of $1,000 or more.'}})
2024-12-27 22:33:19,204 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:19,210 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:23,812 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:23,831 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:23,927 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person they remit funds to who is the beneficiary of an international electronic funds transfer of $1,000 or more.'}})
2024-12-27 22:33:24,220 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:24,231 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:30,778 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:30,795 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:30,889 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person who requests the transfer of virtual currency in an amount equivalent to $1,000 or more.'}})
2024-12-27 22:33:31,091 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:31,098 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:35,691 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:35,709 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:35,809 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person they remit virtual currency to as the beneficiary of a transfer equivalent to $1,000 or more.'}})
2024-12-27 22:33:36,203 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:36,213 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:41,731 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:41,751 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:41,851 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person who requests a foreign currency exchange of $3,000 or more.'}})
2024-12-27 22:33:42,194 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:42,203 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:47,928 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:47,942 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:48,010 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person who requests a virtual currency exchange in an amount equivalent to $1,000 or more.'}})
2024-12-27 22:33:48,278 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:48,284 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:33:53,592 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:33:53,610 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:33:53,694 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person, corporation, and entity other than a corporation for which they open an account.'}})
2024-12-27 22:33:53,947 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:33:53,958 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:02,471 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:02,494 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:02,605 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person authorized to give instructions on an account before the first transaction is carried out.'}})
2024-12-27 22:34:02,826 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:02,835 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:08,357 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:08,377 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:08,457 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities cannot open an account for a person, corporation, or other entity if they cannot verify their identity in accordance with the Regulations.'}})
2024-12-27 22:34:08,652 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:08,655 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:22,080 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:22,102 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:22,221 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person, corporation, and other entity for which they open a credit card account before the credit card can be activated.'}})
2024-12-27 22:34:22,528 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:22,537 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:29,555 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:29,575 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:29,690 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'If credit cards are issued for persons other than the account holder, financial entities must record their information if they are authorized to give instructions on an account.'}})
2024-12-27 22:34:29,860 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:29,868 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:37,165 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:37,175 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:37,299 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons other than the account holder if they are authorized to give instructions on an account.'}})
2024-12-27 22:34:37,534 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:37,542 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:43,448 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:43,478 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:43,601 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'If there are two or more co-applicants for a credit card account, the identification requirement applies to all co-applicants.'}})
2024-12-27 22:34:43,844 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:43,852 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:48,089 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:48,110 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:48,181 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person, corporation, and other entity for which they open a prepaid payment product account before the account is activated.'}})
2024-12-27 22:34:48,297 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:48,304 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:34:55,874 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:34:55,893 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:34:55,986 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every authorized user of a prepaid payment product account before the first transaction is carried out.'}})
2024-12-27 22:34:56,162 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:34:56,170 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:00,929 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:00,948 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:01,052 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of every person, corporation, and other entity that makes a payment of $1,000 or more to a prepaid payment product account when the transaction takes place.'}})
2024-12-27 22:35:01,301 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:01,309 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:10,826 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:10,846 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:10,963 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Trust companies must verify the identity of every person who is the settlor of an inter vivos trust for which they are a trustee.'}})
2024-12-27 22:35:11,175 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:11,180 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:16,863 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:16,876 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:16,971 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Trust companies must verify the identity of a corporation or an entity other than a corporation that is the settlor of an institutional trust for which they are a trustee.'}})
2024-12-27 22:35:17,278 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:17,286 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:24,438 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:24,456 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:24,544 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Trust companies must verify the identity of any person who is authorized to act as co-trustee of a trust.'}})
2024-12-27 22:35:24,823 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:24,830 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:30,794 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:30,814 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:30,906 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'If an entity is authorized to act as co-trustee of a trust, trust companies must verify its identity and the identity of all persons authorized to give instructions on its behalf.'}})
2024-12-27 22:35:31,080 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:31,087 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:37,037 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:37,046 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:37,161 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Trust companies must verify the identity of a person or an entity within 15 days after the day on which the trust company becomes the trustee.'}})
2024-12-27 22:35:37,441 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:37,450 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:42,979 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:42,998 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:43,108 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must keep client identification information up to date as part of their ongoing monitoring requirements for business relationships.'}})
2024-12-27 22:35:43,312 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:43,318 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:48,876 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:48,893 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:48,993 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to re-identify clients in accordance with the methods to verify identity when keeping client identification information up to date.'}})
2024-12-27 22:35:49,530 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:49,537 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:50,554 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:50,566 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:50,595 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person or an entity if they previously did so using the methods specified by the Regulations in place at the time.'}})
2024-12-27 22:35:50,832 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:50,896 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:35:56,539 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:35:56,558 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:35:56,659 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person or entity that conducts a large cash transaction if they receive the cash from another financial entity or a public body.'}})
2024-12-27 22:35:57,108 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:35:57,111 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:36:05,258 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:36:05,273 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:36:05,386 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person or entity that conducts a large cash transaction if the amount received is deposited to a business account or in an automated banking machine.'}})
2024-12-27 22:36:05,667 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:36:05,675 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:36:14,327 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:36:14,346 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:36:14,479 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person or entity that conducts a large virtual currency transaction if they receive the virtual currency from a client that is a financial entity or a public body.'}})
2024-12-27 22:36:14,634 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:36:14,642 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:36:24,145 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:36:24,164 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:36:24,286 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not need to keep a large virtual currency transaction record and do not need to verify identity when transferring or receiving virtual currency as compensation for the validation of a transaction recorded in a distributed ledger.'}})
2024-12-27 22:36:24,528 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:36:24,531 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:36:38,550 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:36:38,579 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:36:38,726 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to take reasonable measures to verify the identity of the person or entity that conducts or attempts to conduct a suspicious transaction if they have already verified the identity and have no doubts about the identification information.'}})
2024-12-27 22:36:38,890 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:36:38,898 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:36:45,342 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:36:45,364 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:36:45,455 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to take reasonable measures to verify the identity of the person or entity that conducts or attempts to conduct a suspicious transaction if they believe that verifying the identity would inform them that they are submitting a Suspicious Transaction Report.'}})
2024-12-27 22:36:45,605 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:36:45,612 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:36:53,327 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:36:53,345 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:36:53,468 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Client identification requirements do not apply when financial entities carry out transactions for a person by means of a credit/debit card or prepaid payment product if the beneficiary has an agreement with the payment service provider that permits payments by those means for goods and services.'}})
2024-12-27 22:36:53,661 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:36:53,669 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:00,087 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:00,099 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:00,182 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Client identification requirements do not apply to processing credit card or prepaid payment product payments on behalf of a merchant.'}})
2024-12-27 22:37:00,433 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:00,441 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:06,094 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:06,116 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:06,223 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person or entity when opening an account if it is for a public body.'}})
2024-12-27 22:37:06,398 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:06,416 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:16,201 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:16,213 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:16,316 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person or entity when opening an account if it is for a very large corporation or trust.'}})
2024-12-27 22:37:16,570 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:16,578 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:25,454 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:25,473 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:25,583 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person or entity when opening an account if it is for a subsidiary of a public body, very large corporation, or trust, if the financial statements of the subsidiary are consolidated with those of the public body, very large corporation, or trust.'}})
2024-12-27 22:37:25,806 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:25,814 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:37,809 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:37,829 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:37,953 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person that opens an account if the person already has an account with them and opens a subsequent account.'}})
2024-12-27 22:37:38,200 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:38,209 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:42,260 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:42,281 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:42,401 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person authorized on a business account if they have verified the identity of at least three persons authorized to give instructions on the account.'}})
2024-12-27 22:37:42,790 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:42,798 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:47,982 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:48,000 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:48,074 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities must verify the identity of another person authorized on a business account if one of the three identified persons leaves the business.'}})
2024-12-27 22:37:48,238 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:48,245 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:37:56,407 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:37:56,425 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:37:56,536 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': "Financial entities do not have to verify the identity of a person when opening an account for the sale of mutual funds if there are reasonable grounds to believe that the client's identity has been verified by a securities dealer in accordance with the Regulations."}})
2024-12-27 22:37:56,760 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:37:56,769 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:38:05,214 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:38:05,232 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:38:05,390 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person when opening an account at the request of an entity for the deposit of a death benefit under a life insurance policy or annuity if the account is opened in the name of a beneficiary that is a person.'}})
2024-12-27 22:38:05,876 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:38:05,887 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:38:22,451 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:38:22,473 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:38:22,587 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person when opening an account at the request of an entity for the deposit of a death benefit under a life insurance policy or annuity if only the death benefit may be deposited in the account.'}})
2024-12-27 22:38:22,771 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:38:22,779 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:38:32,147 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:38:32,166 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:38:32,276 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of a person when opening an account at the request of an entity for the deposit of a death benefit under a life insurance policy or annuity if the policy or annuity contract has been in existence for at least two years before the death benefit claim was made.'}})
2024-12-27 22:38:32,489 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:38:32,497 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:38:45,461 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:38:45,479 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:38:45,607 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the sale of an exempt policy as defined in subsection 306(1) of the Income Tax Regulations.'}})
2024-12-27 22:38:45,789 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:38:45,799 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:38:54,715 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:38:54,731 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:38:54,855 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the sale of a group life insurance policy that does not provide for a cash surrender value or a savings component.'}})
2024-12-27 22:38:55,018 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:38:55,026 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:39:03,807 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:39:03,816 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:39:03,920 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the sale of an immediate or deferred annuity that is paid for entirely with funds directly transferred from a registered pension plan or from a pension plan that must be registered under the Pension Benefits Standards Act, 1985 or similar provincial legislation.'}})
2024-12-27 22:39:04,137 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:39:04,146 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:39:16,488 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:39:16,508 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:39:16,638 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the sale of a registered annuity policy or a registered retirement income fund.'}})
2024-12-27 22:39:16,844 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:39:16,853 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:39:22,938 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:39:22,957 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:39:23,081 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the sale of an immediate or deferred annuity that is paid for entirely with funds from the proceeds of a group life insurance policy.'}})
2024-12-27 22:39:23,308 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:39:23,317 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:39:40,638 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:39:40,658 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:39:40,754 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for a transaction that is part of a reverse mortgage or a structured settlement.'}})
2024-12-27 22:39:40,978 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:39:40,986 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:39:49,153 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:39:49,174 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:39:49,277 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the opening of an account for the deposit and sale of shares from a corporate demutualization or the privatization of a Crown corporation.'}})
2024-12-27 22:39:49,523 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:39:49,532 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:39:58,471 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:39:58,490 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:39:58,599 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the opening of an account in the name of an affiliate of a financial entity if that affiliate carries out activities similar to those of persons and entities referred to in paragraphs 5(a) to (g) of the Act.'}})
2024-12-27 22:39:58,767 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:39:58,776 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:40:08,538 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:40:08,564 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:40:08,690 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the opening of a registered plan account, including a locked-in retirement plan account, a registered retirement savings plan account, and a group registered retirement savings plan account.'}})
2024-12-27 22:40:08,924 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:40:08,933 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:40:15,880 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:40:15,902 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:40:16,038 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the opening of an account established pursuant to the escrow requirements of a Canadian securities regulator or Canadian stock exchange or any provincial legislation.'}})
2024-12-27 22:40:16,291 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:40:16,300 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:40:25,311 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:40:25,330 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:40:25,469 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the opening of an account where the account holder or settlor is a pension fund regulated under federal or provincial legislation.'}})
2024-12-27 22:40:25,623 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:40:25,629 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:40:32,882 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:40:32,901 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:40:33,029 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the opening of an account in the name of, or in respect of which instructions are authorized to be given by a financial entity, a securities dealer, a life insurance company, or an investment fund regulated under provincial securities legislation.'}})
2024-12-27 22:40:33,392 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:40:33,399 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:40:43,910 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:40:43,920 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:40:44,051 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of persons and entities for the opening of an account solely to provide customer accounting services to a securities dealer.'}})
2024-12-27 22:40:44,258 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:40:44,266 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:40:52,847 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:40:52,862 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:40:53,019 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Exceptions to client identification requirements do not apply to large cash transactions, large virtual currency transactions, or suspicious transactions.'}})
2024-12-27 22:40:53,245 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:40:53,250 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:40:58,992 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:40:59,014 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:40:59,127 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of individual members of a group plan if the identity of the entity that is the plan sponsor has been verified.'}})
2024-12-27 22:40:59,384 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:40:59,393 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:41:03,554 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:41:03,578 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:41:03,668 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x1374068a0> with run_params=defaultdict(<class 'dict'>, {'schema': {'entities': [], 'relations': [], 'potential_schema': None}, 'splitter': {'text': 'Financial entities do not have to verify the identity of individual members of a group plan if the individual member contributions are made by the sponsor of the plan or by payroll deduction.'}})
2024-12-27 22:41:03,859 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2024-12-27 22:41:03,865 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2024-12-27 22:41:10,669 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-27 22:41:10,685 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.id)` has no effect.} {description: `RANGE INDEX __entity__id FOR (e:__KGBuilder__) ON (e.id)` already exists.} {position: None} for query: 'CREATE INDEX __entity__id IF NOT EXISTS  FOR (n:__KGBuilder__) ON (n.id)'
2024-12-27 22:41:10,784 - neo4j_graphrag.indexes - INFO - Creating vector index named 'financial-transcripts'
2024-12-27 22:41:10,789 - __main__ - INFO - Vector index 'financial-transcripts' created successfully.
2024-12-27 22:41:10,789 - neo4j_graphrag.indexes - INFO - Creating fulltext index named 'financial-transcript-fulltext-index-name'
2024-12-27 22:41:10,793 - __main__ - INFO - Full-text index 'financial-transcript-fulltext-index-name' created successfully.
